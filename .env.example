# üé¨ Tele-Strem FileStream Setup for Render
# This uses the same technology as TG-FileStreamBot to handle large files

# ===== REQUIRED VARIABLES =====

# Main bot token (get from @BotFather)
BOT_TOKEN=your_main_bot_token_here

# Log channel ID (where files are stored)
# Create a new channel, post something, forward to @missrose_bot, reply with /id
LOG_CHANNEL=-1001234567890

# ===== OPTIONAL BUT RECOMMENDED =====

# Search channels (where to look for content)
SEARCH_CHANNELS=@movies,@series,-1001111111111

# Worker bot tokens for load balancing (up to 5 recommended)
MULTI_TOKEN1=worker_bot_token_1
MULTI_TOKEN2=worker_bot_token_2
MULTI_TOKEN3=worker_bot_token_3
MULTI_TOKEN4=worker_bot_token_4
MULTI_TOKEN5=worker_bot_token_5

# ===== OPTIONAL SETTINGS =====
HASH_LENGTH=8
CACHE_TTL=3600
CHUNK_SIZE=1048576
ENABLE_AUTO_FORWARD=true
ENABLE_CACHING=true

# ===== RENDER AUTO-DETECTED =====
# These are set automatically by Render
# PORT=7000
# RENDER_EXTERNAL_HOSTNAME=your-app.onrender.com

# ===== SETUP STEPS =====

# 1. CREATE BOT TOKENS
#    - Go to @BotFather on Telegram
#    - Create main bot: /newbot
#    - Create 3-5 worker bots: /newbot (repeat)
#    - Save all tokens

# 2. CREATE LOG CHANNEL  
#    - Create a new Telegram channel (private recommended)
#    - Post any message in the channel
#    - Forward that message to @missrose_bot
#    - Reply with /id to get the channel ID
#    - Use that ID for LOG_CHANNEL (including the minus sign!)

# 3. ADD BOTS TO CHANNEL
#    - Add ALL bots (main + workers) as administrators to your log channel
#    - Give them permission to: post messages, edit messages, delete messages

# 4. DEPLOY TO RENDER
#    - Add all environment variables above in Render dashboard
#    - Deploy your app
#    - Check health endpoint: https://your-app.onrender.com/health

# 5. ADD FILES TO YOUR CHANNEL
#    Forward files with IMDB IDs to your log channel like this:
#    
#    üé¨ The Dark Knight (2008)
#    üìä IMDB: tt0468569
#    üé• Quality: 1080p
#    üíæ Size: 2.5GB
#    
#    [Upload your 1GB-4GB video file here]

# 6. TEST IN STREMIO
#    - Add addon: https://your-app.onrender.com/manifest.json
#    - Search for movies you've added
#    - Large files will now stream perfectly!

# ===== HOW IT WORKS =====
# 
# Traditional approach (BROKEN):
# Stremio ‚Üí Your App ‚Üí Download 4GB file ‚Üí ‚ùå 20MB limit
#
# FileStream approach (WORKS):
# Stremio ‚Üí Your App ‚Üí Streaming proxy URL ‚Üí ‚úÖ Direct from Telegram CDN
#
# The magic: Instead of downloading large files, we create streaming URLs
# that proxy directly to Telegram's file servers, bypassing the 20MB limit!

# ===== STREAMING URLS =====
# Files get URLs like: https://your-app.onrender.com/stream/abc123ef
# These URLs:
# - Stream directly from Telegram's CDN
# - Support range requests (video seeking)
# - Handle files up to 2GB (Telegram's limit)
# - Work with ANY file size in your channels

# ===== TROUBLESHOOTING =====

# "status": "ok" but no files found:
# - Make sure files have IMDB IDs in the message text
# - Check that bots are admins in the log channel
# - Forward some test files to see if they get detected

# Streaming fails:
# - Verify all bot tokens are valid
# - Check that log channel ID is correct (including minus sign)
# - Make sure bots have proper permissions in the channel

# Files not being forwarded:
# - Set ENABLE_AUTO_FORWARD=true
# - Make sure the main bot has access to your search channels
# - Check that search channels are properly formatted (@channel or -1001...)

# ===== EXAMPLE WORKING SETUP =====

# BOT_TOKEN=123456789:ABCdefGHIjklMNOpqrSTUvwxyz
# LOG_CHANNEL=-1001234567890
# SEARCH_CHANNELS=@movies,@series
# MULTI_TOKEN1=987654321:ZYXwvuTSRqpONMlkjIHGfeDCBA
# MULTI_TOKEN2=555666777:AAAbbbCCCdddEEEfffGGGhhhIII
# MULTI_TOKEN3=888999000:XXXyyyZZZaaaBBBcccDDDeeeFFF

# With this setup, your addon will:
# ‚úÖ Handle files of ANY size (1GB, 2GB, 4GB+)  
# ‚úÖ Stream instantly without downloads
# ‚úÖ Balance load across multiple bots
# ‚úÖ Auto-forward files to log channel
# ‚úÖ Work perfectly with Stremio!
